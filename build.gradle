/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'simberg' at '4/5/20 4:08 PM' with Gradle 2.10
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
    }
}
plugins {
    id 'java'
    id 'application'
    // plugin ShadowJar pour créer un jar exécutable avec toutes les dépendences.
    //id 'com.github.johnrengelman.shadow' version '5.2.0'
    // Plugin pour l'outil d'analyse PMD
    id 'pmd'
    // Pour compiler le projet en format WAR
    id 'war'
    //plugin pour parser
    id 'antlr'
    id 'maven-publish'

}

version = '1.0'

subprojects {
    version = '1.0'
}
//plugins pour l'application web
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

repositories {
    mavenCentral()
    jcenter()
}

test {
    useJUnitPlatform()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // Dépendences pour l'application
    implementation 'org.slf4j:slf4j-api:1.7.13'
    // Dépendences pour les tests
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.1')
    testImplementation('org.junit.jupiter:junit-jupiter-params:5.3.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.1')
    testRuntimeOnly('org.junit.platform:junit-platform-console:1.3.2')
    //Dépendences pour parser
    antlr 'org.antlr:antlr4:4.7'
    //dépendance pour sous-projet
    compile project(':minischeme-web')
}

task junitConsole(type: JavaExec) {
    dependsOn testClasses
    classpath sourceSets.test.runtimeClasspath
    main 'org.junit.platform.console.ConsoleLauncher'
    args '--scan-classpath'
}


//Spécifier la version Java que nous devons utiliser (11)
sourceCompatibility = '1.11'
targetCompatibility = '1.11'

generateGrammarSource {
    arguments += ['-visitor', '-no-listener']
}

//Spécifier le nom de la classe avec la méthode "main" dans le fichier MANIFEST.MF du fichier Jar.
application {
    mainClassName = 'minischeme.Application'
}

//Pour mettre le nom de la classe avec methode main dans le fichier MANIFEST.MF du jar créer par default
jar {
    manifest {
        attributes 'Main-Class': 'minischeme.Application'
    }
}

pmd {
    version = '6.22.0'
    //ruleSetFiles = files("config/pmd/ruleset.xml")
    ruleSetConfig = resources.text.fromFile("config/pmd/ruleset.xml")
    ignoreFailures = true
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'ca.uqam.inf2050.minischeme'
            artifactId = 'parser'
            version = '1.1'

            from components.java
        }
    }
}
